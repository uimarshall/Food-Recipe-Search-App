{"version":3,"sources":["components/FlashMessage.js","components/AddRecipe.js","components/RecipeDetails.js","components/Recipes.js","components/AnimateText.js","App.js","serviceWorker.js","index.js"],"names":["FlashMessage","message","className","AddRecipe","handleSubmit","handleChange","query","onSubmit","type","placeholder","autoComplete","onChange","value","RecipeDetails","ingredients","map","ingredient","key","uuidv4","text","weight","Recipes","recipe","useState","ingredientshow","setIngredientshow","label","image","url","src","alt","href","target","rel","class","onClick","AnimateText","App","setQuery","recipes","setRecipes","setMessage","getData","a","axios","get","result","data","hits","more","console","log","e","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"yTAUeA,G,MARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvB,OACC,yBAAKC,UAAU,iBACd,4BAAKD,MCiBOE,EAnBG,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,aAAcC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,MAAOL,EAAc,EAAdA,QACvD,OACC,oCACC,0BAAMC,UAAU,cAAcK,SAAUH,GACtCH,EAAU,kBAAC,EAAD,CAAcA,QAASA,IAAc,KAEhD,2BACCO,KAAK,OACLC,YAAY,cACZC,aAAa,MACbC,SAAUN,EACVO,MAAON,IAER,2BAAOE,KAAK,SAASI,MAAM,cCFhBC,EAXO,SAAC,GACtB,OAD0C,EAAlBC,YACLC,KAAI,SAAAC,GACtB,OACC,wBAAIC,IAAKC,cAAUhB,UAAU,mBAC5B,wBAAIA,UAAU,mBAAmBc,EAAWG,MAC5C,wBAAIjB,UAAU,qBAAd,YAA4Cc,EAAWI,aCgB5CC,EArBC,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACaC,oBAAS,GADtB,mBACxBC,EADwB,KACRC,EADQ,OAMYH,EAAOA,OAA1CI,EANuB,EAMvBA,MAAOC,EANgB,EAMhBA,MAAOC,EANS,EAMTA,IAAKd,EANI,EAMJA,YAC3B,OACC,yBAAKZ,UAAU,UACd,4BAAKwB,GACL,yBAAKG,IAAKF,EAAOG,IAAKJ,IACtB,uBAAGK,KAAMH,EAAKI,OAAO,SAASC,IAAI,uBAAlC,aACW,uBAAGC,MAAM,sBACnB,uBAAGA,MAAM,uBAEV,4BAAQC,QAbU,WACnBV,GAAmBD,KAYlB,oBACCA,EAAiB,kBAAC,EAAD,CAAeV,YAAaA,IAAkB,OCJpDsB,EAbK,WACnB,OACC,yBAAKlC,UAAU,gBACd,yBAAKA,UAAU,eACd,iHC4DWmC,MAzDf,WAAgB,IAAD,EACYd,mBAAS,IADrB,mBACPjB,EADO,KACAgC,EADA,OAEgBf,mBAAS,IAFzB,mBAEPgB,EAFO,KAEEC,EAFF,OAGgBjB,mBAAS,IAHzB,mBAGPtB,EAHO,KAGEwC,EAHF,KAORb,EAAG,0CAAsCtB,EAAtC,mBAHM,WAGN,oBAFO,oCAIVoC,EAAO,uCAAG,gCAAAC,EAAA,yDACD,KAAVrC,EADW,iCAEOsC,IAAMC,IAAIjB,GAFjB,UAERkB,EAFQ,SAGSA,EAAOC,KAAtBC,EAHM,EAGNA,KAHM,EAGAC,KAHA,yCAKNR,EAAW,iDALL,OAOdS,QAAQC,IAAIL,GACZN,EAAWQ,GACXP,EAAW,IACXH,EAAS,IAVK,wBAYdG,EAAW,gCAZG,4CAAH,qDA0Bb,OACC,yBAAKvC,UAAU,OACd,kBAAC,EAAD,MACA,2CAEA,kBAAC,EAAD,CACCwC,QAASA,EACTrC,aAjBkB,SAAA+C,GACpBd,EAASc,EAAEpB,OAAOpB,QAiBhBR,aAdkB,SAAAgD,GACpBA,EAAEC,iBACFX,IACAJ,EAAS,KAYPhC,MAAOA,EACPL,QAASA,IAGV,yBAAKC,UAAU,WACbqC,EACEA,EAAQxB,KAAI,SAAAO,GAAM,OAAI,kBAAC,EAAD,CAASA,OAAQA,EAAQL,IAAKC,mBACpD,QChDaoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMtE,c","file":"static/js/main.4403076c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst FlashMessage = ({ message }) => {\r\n\treturn (\r\n\t\t<div className=\"flash-message\">\r\n\t\t\t<h3>{message}</h3>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default FlashMessage;\r\n","import React from \"react\";\r\nimport FlashMessage from \"./FlashMessage\";\r\n\r\nconst AddRecipe = ({ handleSubmit, handleChange, query, message }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form className=\"search-form\" onSubmit={handleSubmit}>\r\n\t\t\t\t{message ? <FlashMessage message={message} /> : null}\r\n\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tplaceholder=\"Search Food\"\r\n\t\t\t\t\tautoComplete=\"off\"\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tvalue={query}\r\n\t\t\t\t/>\r\n\t\t\t\t<input type=\"submit\" value=\"Search\" />\r\n\t\t\t</form>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default AddRecipe;\r\n","import React from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst RecipeDetails = ({ ingredients }) => {\r\n\treturn ingredients.map(ingredient => {\r\n\t\treturn (\r\n\t\t\t<ul key={uuidv4()} className=\"ingredient-list\">\r\n\t\t\t\t<li className=\"ingredient-text\">{ingredient.text}</li>\r\n\t\t\t\t<li className=\"ingredient-weight\">Weight - {ingredient.weight}</li>\r\n\t\t\t</ul>\r\n\t\t);\r\n\t});\r\n};\r\n\r\nexport default RecipeDetails;\r\n","import React, { useState } from \"react\";\r\nimport RecipeDetails from \"./RecipeDetails\";\r\n\r\nconst Recipes = ({ recipe }) => {\r\n\tconst [ingredientshow, setIngredientshow] = useState(false);\r\n\tconst handleClick = () => {\r\n\t\tsetIngredientshow(!ingredientshow);\r\n\t};\r\n\r\n\tconst { label, image, url, ingredients } = recipe.recipe;\r\n\treturn (\r\n\t\t<div className=\"recipe\">\r\n\t\t\t<h2>{label}</h2>\r\n\t\t\t<img src={image} alt={label} />\r\n\t\t\t<a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n\t\t\t\tMore Info <i class=\"fa fa-angle-right\"></i>\r\n\t\t\t\t<i class=\"fa fa-angle-right\"></i>\r\n\t\t\t</a>\r\n\t\t\t<button onClick={handleClick}> see ingredients</button>\r\n\t\t\t{ingredientshow ? <RecipeDetails ingredients={ingredients} /> : null}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Recipes;\r\n","import React from \"react\";\r\n\r\nconst AnimateText = () => {\r\n\treturn (\r\n\t\t<div className=\"display-text\">\r\n\t\t\t<div className=\"scroll-left\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tSearch for recipes for your favourite foods such rice, pizza,\r\n\t\t\t\t\tburger,chicken...\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default AnimateText;\r\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport \"./App.css\";\nimport AddRecipe from \"./components/AddRecipe\";\nimport Recipes from \"./components/Recipes\";\nimport AnimateText from \"./components/AnimateText\";\n\nfunction App() {\n\tconst [query, setQuery] = useState(\"\");\n\tconst [recipes, setRecipes] = useState([]);\n\tconst [message, setMessage] = useState(\"\");\n\tconst APP_ID = \"759a9f86\";\n\tconst APP_KEY = \"ba2d23594e77b0cbc8c8fc6c40d2f9c7\";\n\t//  API Link\n\tconst url = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\t// Get data from API\n\tconst getData = async () => {\n\t\tif (query !== \"\") {\n\t\t\tconst result = await axios.get(url);\n\t\t\tconst { hits, more } = result.data;\n\t\t\tif (!more) {\n\t\t\t\treturn setMessage(\"The food you are looking for does not exist!\");\n\t\t\t}\n\t\t\tconsole.log(result);\n\t\t\tsetRecipes(hits);\n\t\t\tsetMessage(\"\");\n\t\t\tsetQuery(\"\");\n\t\t} else {\n\t\t\tsetMessage(\"You did not input any entry!\");\n\t\t}\n\t};\n\t// Sync form input to state\n\tconst handleChange = e => {\n\t\tsetQuery(e.target.value);\n\t};\n\t// Get data after submit\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\t\tgetData();\n\t\tsetQuery(\"\");\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<AnimateText />\n\t\t\t<h1>Recipe Bowl</h1>\n\n\t\t\t<AddRecipe\n\t\t\t\tgetData={getData}\n\t\t\t\thandleChange={handleChange}\n\t\t\t\thandleSubmit={handleSubmit}\n\t\t\t\tquery={query}\n\t\t\t\tmessage={message}\n\t\t\t/>\n\n\t\t\t<div className=\"recipes\">\n\t\t\t\t{recipes\n\t\t\t\t\t? recipes.map(recipe => <Recipes recipe={recipe} key={uuidv4()} />)\n\t\t\t\t\t: null}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}